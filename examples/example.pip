put '.fact = .fn
    == 0
        then 0
        else .it * (.it - 1 .fact)


put '.fact =
    match 0 to 0
          1 to 1
          * (.it - 1 .fact)

put '.qsort =
    match . to .
          (scope
            put 'x.    = .head
            put 'xs.   = .tail
            put 'head. = to xs. filter (< x.)
            put 'tail. = to xs. filter (> x.)

            x. append x. concat xs.)


from to 0 range 10 .qsort .value send (to sys : 'stdout : 'write)
comment (
from to file : 'read-all apply 'test-data.csv
    split '\n
    .tail
    map (
        split ';
        zip ("account period debit credit" .words)
    )
    combine (to sys get 'stdin get '.read-all split ';)
    (scope
        put-all (zip (to "journal query" .words) map flip)
        put 'journal. = .head
        put 'query.   = nth 1

        put-all (query. zip (to "starting-account ending-account start-period format" .words) map flip)
        )
    send (to sys : 'stdout)


),put 'map = (fn '.map-fn)
    match . to .
          .head .map-fn prepend (.it map .map-fn)


put 'filter = (fn '.filter-fn)
    match . .
          (scope put 'x.  = .head
                 put 'xs. = .tail

                 x. .filter-fn then (x. prepend (xs. filter .filter-fn))
                               else (r xs. filter .filter-fn))


put 'foo. = to 2 + 2



to. 0 range. 10 filter. (<. 4)

to. 0 range. 10 reduce.. 0 +

'qsort .=. (scope
    'x  .=. head
    'xs .=. tail
    'lt .=. (to. xs filter. <. pivot)
    'gt .=. (to. xs filter. >. pivot)

    . ; lt , x ; gt
)

to1 0 range1 10 reduce2 0 +0

to 0 range 10 reduce2 0 +

to 0, range 10, reduce 0 +

0 .range. 10 map. 5

'sum .=. (reduce.. + 0)


to list . 0 . 1 . 2



= 'qsort (scope,
    = 'x head,
    = 'xs tail,
    = 'lt (to xs, filter (< x)),
    = 'gt (to xs, filter (> x)),

    to lt, push x, concat gt
)

put 'qsort = (scope ,
    put 'x = head ,
    put 'xs = tail ,
    put 'lt = (to xs filter (< x)) ,
    put 'gt = (to xs filter (> x)) ,

    to lt push x concat gt
)

= 'sum (reduce + 0)

to 0, range 10,

connect
    (to sys . 'stdin)
    (to sys . 'stdout)

= 'numerals (to 'MDCLXVI, zip (to list push 1000 500 100 50 10 5 1)),
= 'do-num (fn 'numeral, scope,
    = 'value head,
    = 's last,

    = 'char (numeral head),
    = 'char-value (numeral last),

    = 'num-of-chars (/ char-value, floor),
    = 'chars (to char, repeat num-of-chars),

    to value - (to num-of-chars, * char-value), pair (to s, concat chars)
),
= 'to-numeral (stored 'num, to numerals, reduce do-num (to num, pair ')),
= 'is-pan-digital (sorted, == (to numerals, sorted)),

comment this is a multi-line comment
        the comment will continue until
        the next comma character,

connect
    (to 1, range 2000, map to-numeral, filter is-pan-digital, join '\n)
    (to sys . 'stdout)


= 'qsort (scope,
        = 'x head,
        = 'xs tail,
        = 'lt (to xs, filter (< x)),
        = 'gt (to xs, filter (> x ))'

    )

to 1 + 3 / 4
to 1, + 3, / 4

to. 0 range. 100 reduce.. + 0
