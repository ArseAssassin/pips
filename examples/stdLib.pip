= 'fn (to '(= 'args args 'input input 'recur recur),
      meta 'accessParentScope (hashmap 'args '_args 'input '_input 'recur '_recur)),
= 'fromLeft '(to _input),
= 'args= (to '(apply = (to _args, zip parentArgs, flatten)),
             meta 'accessParentScope (hashmap 'parentArgs '_args)),

= '*= '(apply = _input),

= 'list* '(fn,
    = 'errorMsg '(throw 'PatternError (str "list* input " input " couldn't satisfy given pattern " args)),
    = 'inputLen '(to input, len),
    = 'argsLen '(to args, len),

    if  (inputLen, == 0, and (argsLen, == 0)) (list)
        (inputLen, == 1, and (argsLen, == 1)) (to args, concat input)
        (inputLen, > 0, and (argsLen, == 2))
            (list (to args, head)
                 (to input, head)
                 (to args, . 1)
                 (to input, tail))
        (inputLen, > 1, and (argsLen, > 1))
            (catch (
                list (to args, head) (to input, head),
                concat (to input, tail, apply recur (to args, tail))
            ) 'PatternError errorMsg)
        (errorMsg)
), = 'list*= '(apply list* _args, *=),

= 'chunks '(fn, args= 'size,
    if (to input, len, == 0) (list)
       (to input, take size, prepend (to input, drop size, chunks size))
),

= 'drop '(fn,
    args= 'i,
    to input,
    if (== (list), or (to i, == 0)) input
       (tail, recur (to i, - 1))),

= 'take '(fn, args= 'i,
    if (to i, == 0, or (to input, == (list))) (list)
       (to input, head, prepend (to input, tail, recur (to i, - 1)))),

= '>> '(fn,
    to args,
    len, == 0, and input,
    or (
        to args,
        = 'f (head)
          'arg (drop 1, head)
          'rest (drop 2),

        to input, apply f (list arg), apply recur rest)
),

= 'case '(fn,
    catch
        (to input, apply (to args, head) (to args, tail))
        'PatternError '(throw 'MatchingError "Matching a case failed")
),

= 'isEmpty '(len, == 0),

= 'ls '(
    to _args, list*= 'i 'f 'rest,
    to i, apply f rest
),

= 'find '(fn, args= 'f,
    to input, catch (list*= 'value 'rest) 'PatternError '(throw 'ValueError (str "find couldn't satisfy given predicate")),

    if (to value, f) value
       (to rest, recur f)
),

= 'match '(fn,
    to input,
    if (ls args len, == 0) (throw 'PatternError "No matching pattern found")
       (catch (to input, (to args, head)) 'MatchingError '(to input, apply recur (to args, tail)))
),

= 'map '(fn, args= 'f,
    to input,
    match
        '(case list*= 'value 'rest, to value, f, prepend (to rest, recur f))
        '(case list*=, list)
),

= 'filter '(fn, args= 'f,
    to input,
    match
        '(case list*=, list)
        '(case list*= 'value 'rest,
            if (to value, f) (list value)
               (list),
            concat (to rest, recur f))
),

= 'hashmap* '(fn,
    to args, match
        '(case list*= 'name 'rest,
            catch (to input, . name) 'LookupError '(throw 'MatchingError "Value not found"),
            list name (fromLeft),
            concat (to input, apply recur rest)
        )
        '(case list*=, list)
), = 'hashmap*= '(apply list* _args, *=),

= 'adjust '(fn, args= 'i 'f,
    if (ls i > (ls input len)) (throw 'IndexError (str "Index " i " is out of bounds for list " input))
       (ls i < 0) (throw 'IndexError (str "Can't adjust index " i))
       (ls input take i,
        append (ls input . i, f),
        concat (ls input drop (ls i + 1)))
),

= 'dropWhile '(fn, args= 'f,
    to input, match
        '(case list*= 'value 'rest,
            if (to value, f) (to rest, recur f)
               input)
        '(case list*, list)
),

= 'takeWhile '(fn, args= 'f,
    to input, match
        '(case list*= 'value 'rest,
            if (to value, f) (to value, prepend (to rest, recur f))
               (list)
        )
        '(case list*, list)
    ),

= 'reduce '(fn, args= 'f 'acc,
    to input, match
        '(case list*= 'value 'rest, to rest, recur f (to acc, f value))
        '(case list*=, to acc)
),

= 'curry '(fn,
    to '(apply input (ls args concat _args))
),

= 'reduceArgs '(fn,
    to args,
    match
        '(case list*= 'f 'fnArgs, ls fnArgs reduce f input)
        '(to input)
),

to scope
